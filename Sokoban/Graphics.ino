Type_Camera Camera;

/* ////////////////////////////////////////////////////////////////
  // Sprites du décor
  //////////////////////////////////////////////////////////////// */

const uint16_t CaisseData[] = {8, 8, 1, 1, 0xca30, 0, 0xca30, 0xca30, 0xca30, 0xf5ce, 0xed6c, 0xca30, 0xca30, 0xca30, 0xca30, 0xca30, 0xf5ce, 0xf5ce, 0xed6c, 0xe54c, 0xca30, 0xca30, 0xc363, 0xd447, 0xe50a, 0xf5ac, 0xfded, 0xf58b, 0xcc47, 0xa283, 0xbb22, 0xaaa2, 0xf5ac, 0xf5ac, 0xf5ac, 0xaac2, 0xa241, 0x91e0, 0xbb02, 0xaaa2, 0xa241, 0xf5ac, 0xbb03, 0xaac2, 0xa241, 0x91c0, 0xbb02, 0xaaa2, 0xa241, 0x91c0, 0xbb03, 0xaac2, 0xa241, 0x91c0, 0xca30, 0xaaa2, 0xa241, 0x91e0, 0xbb23, 0xaaa2, 0xa241, 0xca30, 0xca30, 0xca30, 0xa241, 0x9a63, 0xb326, 0xca30, 0xca30, 0xca30};
Image Caisse = Image(CaisseData);

const uint16_t CibleData[] = {8, 8, 1, 1, 0, 0, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800};
Image Cible = Image(CibleData);

const uint16_t MurData[] = {8, 8, 1, 1, 0, 0, 0x8984, 0x4208, 0x4208, 0xa1c5, 0x4208, 0x4208, 0x8984, 0x4208, 0x4208, 0xc103, 0xc103, 0xb143, 0xb164, 0xc103, 0xc103, 0x91c5, 0x9184, 0x9963, 0x9943, 0xa943, 0xa984, 0xa1a4, 0x99a4, 0x4208, 0x4208, 0xc103, 0xc103, 0xa164, 0xa1a4, 0xc103, 0xc103, 0x8a05, 0x9206, 0x99a5, 0x9184, 0x8984, 0xa184, 0xa184, 0x89c5, 0x4208, 0x4208, 0xc103, 0xc103, 0x8984, 0xc103, 0xc103, 0x89a4, 0x79e5, 0x9226, 0x99c5, 0x9964, 0xa163, 0xa963, 0xb143, 0x9964, 0x4208, 0x4208, 0x4208, 0xc103, 0xc0e2, 0x4208, 0xc0e2, 0xc102, 0x4208};
Image Mur = Image(MurData);

const uint16_t SolData[] = {8, 8, 1, 1, 0, 0, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x4208, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x4208, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x4208, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x4208, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x4208, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x4208, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410};
Image Sol = Image(SolData);


/* ////////////////////////////////////////////////////////////////
  // Ajout des sprites du personnage
  //////////////////////////////////////////////////////////////// */

const uint16_t Personnage_marche_bas_anim1x8Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xa8a3, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0x4439, 0x210, 0x210, 0x210, 0xf80d, 0xf80d, 0xf80d, 0x210, 0x4439, 0x4439, 0x4439, 0x210, 0x210, 0xf80d, 0xacd0, 0xffff, 0xfd42, 0xfd42, 0xfd42, 0xa8a3, 0xffff, 0xacd0, 0xffff, 0xacd0, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xacd0, 0xffff, 0xfeb2, 0xf80d, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xf80d, 0xfeb2, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xcc68, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d};
Image Marche_bas1 = Image(Personnage_marche_bas_anim1x8Data);

const uint16_t Personnage_marche_bas_anim2x8Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xd8e4, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0x210, 0x210, 0x210, 0x4439, 0xf80d, 0xf80d, 0xf80d, 0x210, 0x210, 0x4439, 0x4439, 0x4439, 0x210, 0xf80d, 0xacd0, 0xffff, 0xfd42, 0xfd42, 0xfd42, 0xd8e4, 0xffff, 0xacd0, 0xffff, 0xacd0, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xacd0, 0xffff, 0xfeb2, 0xf80d, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xf80d, 0xfeb2, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xcc68, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d};
Image Marche_bas2 = Image(Personnage_marche_bas_anim2x8Data);

const uint16_t Personnage_marche_droite_anim1x8Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0xfeb2, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0x210, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0x210, 0x210, 0xfd42, 0xf720, 0xf720, 0xf80d, 0xf80d, 0xf80d, 0x210, 0x4439, 0xf720, 0xfd42, 0xfd42, 0xfeb2, 0xf80d, 0xf80d, 0x210, 0x4439, 0xfd42, 0xfd42, 0xfd42, 0xcc68, 0xf80d, 0xd8e4, 0x4439, 0x4439, 0xd8e4, 0xd8e4, 0xd8e4, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0x210, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0xfeb2, 0xf80d, 0xf80d};
Image Marche_droite1 = Image(Personnage_marche_droite_anim1x8Data);

const uint16_t Personnage_marche_droite_anim2x8Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0xfeb2, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0x210, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d, 0xd8e4, 0x4439, 0x4439, 0xfd42, 0xf720, 0xf720, 0xf80d, 0xf80d, 0xf80d, 0x210, 0x4439, 0xf720, 0xfd42, 0xfd42, 0xfeb2, 0xf80d, 0xf80d, 0x210, 0x4439, 0xfd42, 0xfd42, 0xfd42, 0xcc68, 0xf80d, 0xf80d, 0x210, 0x210, 0xd8e4, 0xd8e4, 0xd8e4, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0x210, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0xfeb2, 0xf80d, 0xf80d};
Image Marche_droite2 = Image(Personnage_marche_droite_anim2x8Data);

const uint16_t Personnage_marche_gauche_anim1x8Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xfeb2, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf720, 0xf720, 0xfd42, 0x210, 0x210, 0xf80d, 0xf80d, 0xfeb2, 0xfd42, 0xfd42, 0xf720, 0x4439, 0x210, 0xf80d, 0xf80d, 0xcc68, 0xfd42, 0xfd42, 0xfd42, 0x4439, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xd8e4, 0xd8e4, 0xd8e4, 0x4439, 0x4439, 0xd8e4, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d};
Image Marche_gauche1 = Image(Personnage_marche_gauche_anim1x8Data);

const uint16_t Personnage_marche_gauche_anim2x8Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xfeb2, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf720, 0xf720, 0xfd42, 0x4439, 0x4439, 0xd8e4, 0xf80d, 0xfeb2, 0xfd42, 0xfd42, 0xf720, 0x4439, 0x210, 0xf80d, 0xf80d, 0xcc68, 0xfd42, 0xfd42, 0xfd42, 0x4439, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xd8e4, 0xd8e4, 0xd8e4, 0x210, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d};
Image Marche_gauche2 = Image(Personnage_marche_gauche_anim2x8Data);

const uint16_t Personnage_marche_haut_anim1x8Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xcc68, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xf80d, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xf80d, 0xfeb2, 0xffff, 0xacd0, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xacd0, 0xffff, 0xacd0, 0xffff, 0xfd42, 0xfd42, 0xfd42, 0xa8a3, 0xffff, 0xacd0, 0xf80d, 0x210, 0x4439, 0x4439, 0x4439, 0x210, 0x210, 0xf80d, 0xf80d, 0xf80d, 0x4439, 0x210, 0x210, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xa8a3, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d};
Image Marche_haut1 = Image(Personnage_marche_haut_anim1x8Data);

const uint16_t Personnage_marche_haut_anim2x8Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xcc68, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xf80d, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xf80d, 0xfeb2, 0xffff, 0xacd0, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xacd0, 0xffff, 0xacd0, 0xffff, 0xfd42, 0xfd42, 0xfd42, 0xa8a3, 0xffff, 0xacd0, 0xf80d, 0x210, 0x210, 0x4439, 0x4439, 0x4439, 0x210, 0xf80d, 0xf80d, 0xf80d, 0x210, 0x210, 0x210, 0x4439, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xa8a3, 0xf80d, 0xf80d};
Image Marche_haut2 = Image(Personnage_marche_haut_anim2x8Data);


/* ////////////////////////////////////////////////////////////////
  // Procédures
  //////////////////////////////////////////////////////////////// */

const char TailleSprite = 8;

void Position_camera(uint8_t Xp, uint8_t  Yp) {

  // Calcul de la position de la zone à afficher
  if (Xp >= 3) {
    Camera.X = Xp - 3;
  } else {
    Camera.X = 0;
  }

  if (Yp >= 3) {
    Camera.Y = Yp - 3;
  } else {
    Camera.Y = 0;
  }

  if (Xp > NB_COLONNES_NIVEAUX - 3) {
    Camera.X = NB_COLONNES_NIVEAUX - 5;
  }

  if (Yp > NB_LIGNES_NIVEAUX - 3) {
    Camera.Y = NB_LIGNES_NIVEAUX - 5;
  }
}

void DessineNiveau() {
  for (int ligne = 0 ; ligne < 7; ligne++) {
    for (int colonne = 0; colonne < 7; colonne++) {
      DessineSprite(currentLevelData[(Camera.Y + ligne)*NB_COLONNES_NIVEAUX + Camera.X + colonne], colonne , ligne);
    }
  }
}


void DessineSprite(char Type, char Xs, char Ys) {
  switch (Type) {
    case ' ' : // Sol vide
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Sol);
      break;
    case '#' : // Mur
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Mur);
      break;
    case '.' : // Zone d'arrivée des caisse
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Cible);
      break;
    case '$' : // Une caisse sur le sol
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Sol);
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Caisse);
      break;
    case '*' : // Une caisse sur une zone d'arrivée
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Cible);
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Caisse);
      break;
    case '@' : // Le personnage est sur un sol vide
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Sol);
      break;
    case '+' : // Le personnage est sur une zone cible pour les caises
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Cible);
      break;
  } // end Switch
}

void DessinePerso() {
  int Delta = Joueur.Anime / VITESSE_ANIME;
  int Delta2 = TailleSprite / 2;
  int Xp;
  int Yp;

  Xp = Joueur.X - Camera.X;
  Yp = Joueur.Y - Camera.Y;
  
  switch (Joueur.En_mouvement) {

    case STOP :
      switch (Joueur.Direction) {
        case BAS :
          gb.display.drawImage(Xp * TailleSprite, Yp * TailleSprite, Marche_bas1);
          break;
        case HAUT:
          gb.display.drawImage(Xp * TailleSprite, Yp * TailleSprite - Delta, Marche_haut1);
          break;
        case GAUCHE :
          gb.display.drawImage(Xp * TailleSprite - Delta, Yp* TailleSprite, Marche_gauche1);
          break;
        case DROITE :
          gb.display.drawImage(Xp * TailleSprite + Delta, Yp * TailleSprite, Marche_droite1);
          break;
      }
      break;

    case BAS :
      if (Joueur.Anime % TailleSprite >= Delta2) {
        gb.display.drawImage(Xp * TailleSprite, Yp * TailleSprite + Delta, Marche_bas2);
      } else {
        gb.display.drawImage(Xp * TailleSprite, Yp * TailleSprite + Delta, Marche_bas1);
      }
      if (Joueur.Pousse == 1) gb.display.drawImage(Xp * TailleSprite, (Yp+1) * TailleSprite + Delta, Caisse);
      break;

    case HAUT :
      if (Joueur.Anime % TailleSprite >= Delta2) {
        gb.display.drawImage(Xp * TailleSprite, Yp * TailleSprite - Delta, Marche_haut2);
      } else {
        gb.display.drawImage(Xp * TailleSprite, Yp * TailleSprite - Delta, Marche_haut1);
      }
      if (Joueur.Pousse == 1) gb.display.drawImage(3 * TailleSprite, (Yp -1) * TailleSprite - Delta, Caisse);
      break;

    case DROITE :
      if (Joueur.Anime % TailleSprite >= Delta2) {
        gb.display.drawImage(Xp * TailleSprite + Delta, Yp * TailleSprite, Marche_droite2);
      } else {
        gb.display.drawImage(Xp * TailleSprite + Delta, Yp * TailleSprite, Marche_droite1);
      }
      if (Joueur.Pousse == 1) gb.display.drawImage((Xp +1) * TailleSprite + Delta, Yp * TailleSprite, Caisse);
      break;
    case GAUCHE :
      if (Joueur.Anime % TailleSprite >= Delta2) {
        gb.display.drawImage(Xp * TailleSprite  - Delta, Yp * TailleSprite, Marche_gauche2);
      } else {
        gb.display.drawImage(Xp * TailleSprite - Delta, Yp * TailleSprite, Marche_gauche1);
      }
      if (Joueur.Pousse == 1) gb.display.drawImage((Xp -1) * TailleSprite - Delta, Yp * TailleSprite, Caisse);
      break;
  }
}
