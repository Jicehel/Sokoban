Type_Camera Camera;

/* ////////////////////////////////////////////////////////////////
  // Sprites du d√©cor
  //////////////////////////////////////////////////////////////// */

const uint16_t CaisseData[] = {8, 8, 1, 1, 0xca30, 0, 0xca30, 0xca30, 0xca30, 0xf5ce, 0xed6c, 0xca30, 0xca30, 0xca30, 0xca30, 0xca30, 0xf5ce, 0xf5ce, 0xed6c, 0xe54c, 0xca30, 0xca30, 0xc363, 0xd447, 0xe50a, 0xf5ac, 0xfded, 0xf58b, 0xcc47, 0xa283, 0xbb22, 0xaaa2, 0xf5ac, 0xf5ac, 0xf5ac, 0xaac2, 0xa241, 0x91e0, 0xbb02, 0xaaa2, 0xa241, 0xf5ac, 0xbb03, 0xaac2, 0xa241, 0x91c0, 0xbb02, 0xaaa2, 0xa241, 0x91c0, 0xbb03, 0xaac2, 0xa241, 0x91c0, 0xca30, 0xaaa2, 0xa241, 0x91e0, 0xbb23, 0xaaa2, 0xa241, 0xca30, 0xca30, 0xca30, 0xa241, 0x9a63, 0xb326, 0xca30, 0xca30, 0xca30};
Image Caisse = Image(CaisseData);

const uint16_t CibleData[] = {8, 8, 1, 1, 0, 0, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0x8410, 0x8410, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800};
Image Cible = Image(CibleData);

const uint16_t MurData[] = {8, 8, 1, 1, 0, 0, 0x8984, 0x4208, 0x4208, 0xa1c5, 0x4208, 0x4208, 0x8984, 0x4208, 0x4208, 0xc103, 0xc103, 0xb143, 0xb164, 0xc103, 0xc103, 0x91c5, 0x9184, 0x9963, 0x9943, 0xa943, 0xa984, 0xa1a4, 0x99a4, 0x4208, 0x4208, 0xc103, 0xc103, 0xa164, 0xa1a4, 0xc103, 0xc103, 0x8a05, 0x9206, 0x99a5, 0x9184, 0x8984, 0xa184, 0xa184, 0x89c5, 0x4208, 0x4208, 0xc103, 0xc103, 0x8984, 0xc103, 0xc103, 0x89a4, 0x79e5, 0x9226, 0x99c5, 0x9964, 0xa163, 0xa963, 0xb143, 0x9964, 0x4208, 0x4208, 0x4208, 0xc103, 0xc0e2, 0x4208, 0xc0e2, 0xc102, 0x4208};
Image Mur = Image(MurData);

const uint16_t SolData[] = {8, 8, 1, 1, 0, 0, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x4208, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x4208, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x4208, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x4208, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x4208, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x4208, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410, 0x8410};
Image Sol = Image(SolData);


/* ////////////////////////////////////////////////////////////////
  // Ajout des sprites du personnage
  //////////////////////////////////////////////////////////////// */

const uint16_t Personnage_marche_bas_anim1_Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xa8a3, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0x4439, 0x210, 0x210, 0x210, 0xf80d, 0xf80d, 0xf80d, 0x210, 0x4439, 0x4439, 0x4439, 0x210, 0x210, 0xf80d, 0xacd0, 0xffff, 0xfd42, 0xfd42, 0xfd42, 0xa8a3, 0xffff, 0xacd0, 0xffff, 0xacd0, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xacd0, 0xffff, 0xfeb2, 0xf80d, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xf80d, 0xfeb2, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xcc68, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d};
Image Marche_bas1 = Image(Personnage_marche_bas_anim1_Data);

const uint16_t Personnage_marche_bas_anim2_Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xd8e4, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0x210, 0x210, 0x210, 0x4439, 0xf80d, 0xf80d, 0xf80d, 0x210, 0x210, 0x4439, 0x4439, 0x4439, 0x210, 0xf80d, 0xacd0, 0xffff, 0xfd42, 0xfd42, 0xfd42, 0xd8e4, 0xffff, 0xacd0, 0xffff, 0xacd0, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xacd0, 0xffff, 0xfeb2, 0xf80d, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xf80d, 0xfeb2, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xcc68, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d};
Image Marche_bas2 = Image(Personnage_marche_bas_anim2_Data);

const uint16_t Personnage_marche_droite_anim1_Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0xfeb2, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0x210, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0x210, 0x210, 0xfd42, 0xf720, 0xf720, 0xf80d, 0xf80d, 0xf80d, 0x210, 0x4439, 0xf720, 0xfd42, 0xfd42, 0xfeb2, 0xf80d, 0xf80d, 0x210, 0x4439, 0xfd42, 0xfd42, 0xfd42, 0xcc68, 0xf80d, 0xd8e4, 0x4439, 0x4439, 0xd8e4, 0xd8e4, 0xd8e4, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0x210, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0xfeb2, 0xf80d, 0xf80d};
Image Marche_droite1 = Image(Personnage_marche_droite_anim1_Data);

const uint16_t Personnage_marche_droite_anim2_Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0xfeb2, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0x210, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d, 0xd8e4, 0x4439, 0x4439, 0xfd42, 0xf720, 0xf720, 0xf80d, 0xf80d, 0xf80d, 0x210, 0x4439, 0xf720, 0xfd42, 0xfd42, 0xfeb2, 0xf80d, 0xf80d, 0x210, 0x4439, 0xfd42, 0xfd42, 0xfd42, 0xcc68, 0xf80d, 0xf80d, 0x210, 0x210, 0xd8e4, 0xd8e4, 0xd8e4, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0x210, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0xfeb2, 0xf80d, 0xf80d};
Image Marche_droite2 = Image(Personnage_marche_droite_anim2_Data);

const uint16_t Personnage_marche_gauche_anim1_Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xfeb2, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf720, 0xf720, 0xfd42, 0x210, 0x210, 0xf80d, 0xf80d, 0xfeb2, 0xfd42, 0xfd42, 0xf720, 0x4439, 0x210, 0xf80d, 0xf80d, 0xcc68, 0xfd42, 0xfd42, 0xfd42, 0x4439, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xd8e4, 0xd8e4, 0xd8e4, 0x4439, 0x4439, 0xd8e4, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d};
Image Marche_gauche1 = Image(Personnage_marche_gauche_anim1_Data);

const uint16_t Personnage_marche_gauche_anim2_Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xfeb2, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf720, 0xf720, 0xfd42, 0x4439, 0x4439, 0xd8e4, 0xf80d, 0xfeb2, 0xfd42, 0xfd42, 0xf720, 0x4439, 0x210, 0xf80d, 0xf80d, 0xcc68, 0xfd42, 0xfd42, 0xfd42, 0x4439, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xd8e4, 0xd8e4, 0xd8e4, 0x210, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xacd0, 0xffff, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xffff, 0xacd0, 0xf80d, 0xf80d, 0xf80d};
Image Marche_gauche2 = Image(Personnage_marche_gauche_anim2_Data);

const uint16_t Personnage_marche_haut_anim1_Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xcc68, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xf80d, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xf80d, 0xfeb2, 0xffff, 0xacd0, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xacd0, 0xffff, 0xacd0, 0xffff, 0xfd42, 0xfd42, 0xfd42, 0xa8a3, 0xffff, 0xacd0, 0xf80d, 0x210, 0x4439, 0x4439, 0x4439, 0x210, 0x210, 0xf80d, 0xf80d, 0xf80d, 0x4439, 0x210, 0x210, 0x210, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xa8a3, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d};
Image Marche_haut1 = Image(Personnage_marche_haut_anim1_Data);

const uint16_t Personnage_marche_haut_anim2_Data[] = {8, 8, 1, 1, 0xf80d, 0, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xcc68, 0xf80d, 0xf80d, 0xf80d, 0xfeb2, 0xf80d, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xf80d, 0xfeb2, 0xffff, 0xacd0, 0xfd42, 0xf720, 0xfd42, 0xfd42, 0xacd0, 0xffff, 0xacd0, 0xffff, 0xfd42, 0xfd42, 0xfd42, 0xa8a3, 0xffff, 0xacd0, 0xf80d, 0x210, 0x210, 0x4439, 0x4439, 0x4439, 0x210, 0xf80d, 0xf80d, 0xf80d, 0x210, 0x210, 0x210, 0x4439, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xf80d, 0xa8a3, 0xf80d, 0xf80d};
Image Marche_haut2 = Image(Personnage_marche_haut_anim2_Data);


/* ////////////////////////////////////////////////////////////////
  // Ajout du sprite pour le titre de la page d'accueil
  //////////////////////////////////////////////////////////////// */
  
const uint16_t Title_Data[] = {

    // metadata

    80,     // frame width
    20,     // frame height
    1,      // frames
    0,      // frame loop
    0xf81f, // transparent color
    0,      // 16-bits color mode

    // colormap

    0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2923, 0x2903, 0x2903, 0x2903, 0x2923, 0x3103, 0x3103, 0x3103, 0x2903, 0x2902, 0x2903, 0x3103, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2902, 0x2903, 0x2923, 0x2923, 0x2923, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2923, 0x2922, 0x2923, 0x2923, 0x2903, 0x2923, 0x2903, 0x2903, 0x2923, 0x2903, 0x2903, 0x2903, 0x3103, 0x2903, 0x2903, 0x2923, 0x2903, 0x2903, 0x2923, 0x2903, 0x2903, 0x2923, 0x2903, 0x2923, 0x2923, 0x2903, 0x2923, 0x2923, 0x2903, 0x2903, 0x2923, 0x2903, 0x2923, 0x2903, 0x2903, 0x2903, 0x2903, 0x2902, 0x2923, 0x2923, 0x2923, 0x2903, 0x2903,
    0x2903, 0x2903, 0x2903, 0x2902, 0x2102, 0x2903, 0x2102, 0x2903, 0x2903, 0x2903, 0x2102, 0x2923, 0x20e3, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x28e3, 0x28e3, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2102, 0x2902, 0x2903, 0x2902, 0x2903, 0x2903, 0x2102, 0x2902, 0x2903, 0x2903, 0x2903, 0x2903, 0x2902, 0x2923, 0x2902, 0x20e2, 0x2903, 0x2903, 0x2903, 0x2903, 0x28e3, 0x2902, 0x28e2, 0x28e3, 0x2902, 0x2903, 0x2903, 0x2903, 0x20e3, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2102, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2903, 0x2902, 0x2902, 0x28e2, 0x28e3, 0x2903, 0x2903, 0x2903, 0x2902, 0x2923, 0x28e3,
    0x2903, 0x18a1, 0x41c6, 0x62ca, 0x630b, 0x630b, 0x630b, 0x62eb, 0x62eb, 0x5248, 0x20c2, 0x20e2, 0x2924, 0x630b, 0x62eb, 0x630b, 0x62eb, 0x62eb, 0x630b, 0x630b, 0x39c6, 0x2903, 0x20e2, 0x5289, 0x5aca, 0x20c2, 0x20e2, 0x2102, 0x2103, 0x2903, 0x20e2, 0x5a89, 0x6b0b, 0x20c2, 0x20c2, 0x39e6, 0x62eb, 0x62eb, 0x62eb, 0x62eb, 0x630b, 0x62ea, 0x62ca, 0x2123, 0x20e2, 0x2103, 0x62cb, 0x62eb, 0x630b, 0x62eb, 0x630b, 0x630b, 0x62eb, 0x62eb, 0x41c6, 0x18c2, 0x2923, 0x20e2, 0x5a89, 0x630b, 0x62eb, 0x62eb, 0x62eb, 0x630b, 0x62eb, 0x5aa9, 0x20e2, 0x2103, 0x2923, 0x5aca, 0x6b0b, 0x630b, 0x62eb, 0x62eb, 0x62eb, 0x62eb, 0x630b, 0x2924, 0x2903, 0x20e2,
    0x1881, 0x8c50, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x2903, 0x2103, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 0x39c6, 0x18a1, 0xffff, 0xffff, 0x20e3, 0x18c1, 0x2103, 0x18a2, 0x2944, 0xe73c, 0xffde, 0xa4f3, 0x20e2, 0x6b2c, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffde, 0x41e6, 0x5289, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 0xffff, 0x7bce, 0x18c2, 0xad75, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf77d, 0x18a2, 0x734c, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xfffe, 0xffff, 0xffff, 0xfffe, 0x20e3, 0x20e2,
    0x2923, 0xf7be, 0xffff, 0x52aa, 0x52a9, 0x5aa9, 0x5aa9, 0x5aa9, 0x5aa9, 0x5a89, 0x18a2, 0x39a6, 0xffff, 0xd699, 0x52aa, 0x5aca, 0x5aca, 0x5acb, 0x528a, 0xad75, 0xffff, 0x840f, 0x0840, 0xffff, 0xffff, 0x18c2, 0x20e2, 0x18a2, 0x2103, 0xef5c, 0xffff, 0x7bef, 0x18c2, 0x18c2, 0xc618, 0xffff, 0x7bcf, 0x5aaa, 0x5aca, 0x5aca, 0x5aca, 0x528a, 0xce59, 0xffff, 0x5289, 0x52aa, 0xffff, 0xb595, 0x5289, 0x5289, 0x5a89, 0x5289, 0x5269, 0x7bef, 0xffff, 0xc617, 0x1081, 0xffff, 0xffdf, 0x632c, 0x5acb, 0x5acb, 0x5aca, 0x5aca, 0x4a49, 0xffff, 0xffff, 0x3185, 0x7b8d, 0xffff, 0x9cf3, 0x5aaa, 0x5aca, 0x5aca, 0x5aca, 0x52aa, 0xf79d, 0xffff, 0x5a89, 0x20c1,
    0x18c2, 0xef7d, 0xffff, 0xa534, 0x9cd2, 0x9cd3, 0x9cd3, 0x9cf3, 0x9cd2, 0x630b, 0x18a2, 0x39c6, 0xffff, 0xbdf6, 0x18a2, 0x18c2, 0x18c2, 0x18c2, 0x18c2, 0x8c50, 0xffff, 0x840f, 0x0820, 0xffff, 0xffff, 0x18c2, 0x18a2, 0x39c6, 0xffff, 0xffff, 0x9491, 0x1081, 0x20e2, 0x18c2, 0xc617, 0xffff, 0x39e7, 0x18a1, 0x20c2, 0x20c2, 0x18c2, 0x18c2, 0xad54, 0xffff, 0x5268, 0x5aaa, 0xffff, 0xdeda, 0x94b2, 0x9cd3, 0x9cd2, 0x9cd2, 0x9cb2, 0xc617, 0xffff, 0xbdf7, 0x1061, 0xffff, 0xf7be, 0x20e3, 0x1081, 0x1081, 0x1881, 0x1081, 0x0820, 0xffff, 0xffff, 0x3185, 0x736d, 0xffff, 0x738d, 0x20c2, 0x20c2, 0x20e2, 0x18c2, 0x1081, 0xef5c, 0xffff, 0x5269, 0x20c2,
    0x18c2, 0x2965, 0xe6fb, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x630b, 0x39c6, 0xffff, 0xc617, 0x1081, 0x18a1, 0x18a1, 0x18a1, 0x18c2, 0x840f, 0xffff, 0x842f, 0x0020, 0xffff, 0xffff, 0x18c2, 0x2965, 0xffbe, 0xffdf, 0x9cf3, 0x0840, 0x18c2, 0x1081, 0x18c2, 0xc617, 0xffff, 0x39c6, 0x18c2, 0x18a2, 0x18a2, 0x18a2, 0x18a2, 0xad75, 0xffff, 0x5289, 0x5289, 0xfffe, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffde, 0xffff, 0xffff, 0xbdf7, 0x0840, 0xffff, 0xffdf, 0xdeda, 0xdeda, 0xd6ba, 0xd6ba, 0xdeba, 0xd6ba, 0xffff, 0xffff, 0x2965, 0x738d, 0xffff, 0x738d, 0x18a2, 0x18a2, 0x18c2, 0x18a2, 0x1060, 0xef3c, 0xffff, 0x5269, 0x18a2,
    0x1081, 0x2944, 0x3186, 0x2945, 0x2965, 0x2965, 0x3185, 0x2124, 0xb596, 0xffff, 0x9cd2, 0x31a6, 0xffff, 0xce59, 0x39c7, 0x39c7, 0x39c6, 0x39e7, 0x39a6, 0xa513, 0xffff, 0x8410, 0x0000, 0xffff, 0xffff, 0x5289, 0xffff, 0xffff, 0xffff, 0xffff, 0xdeda, 0x52aa, 0x0861, 0x10c2, 0xbdf8, 0xffff, 0x62ec, 0x31a6, 0x39c7, 0x39c7, 0x39c7, 0x3166, 0xbdf7, 0xffff, 0x5289, 0x4a69, 0xffff, 0xa514, 0x2945, 0x2965, 0x2965, 0x2965, 0x2945, 0x632c, 0xffff, 0xc5f7, 0x0840, 0xffff, 0xffff, 0xe73c, 0xe71b, 0xe71b, 0xe71b, 0xe71b, 0xe71c, 0xffff, 0xffff, 0x2944, 0x6b4c, 0xffff, 0x736d, 0x18a2, 0x18a2, 0x18a2, 0x18a2, 0x0860, 0xe71c, 0xffff, 0x4a69, 0x1882,
    0x18a2, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x4a28, 0x0861, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 0x528a, 0x0000, 0xdefb, 0xffff, 0xffff, 0xf7df, 0x8430, 0x0020, 0xd6b9, 0xffdf, 0xffff, 0xce59, 0x2103, 0x9492, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf7be, 0x39e6, 0x5289, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x9cd2, 0x1061, 0xffff, 0xf7be, 0x10a2, 0x0840, 0x1061, 0x0840, 0x1061, 0x0000, 0xffff, 0xffff, 0x2924, 0x6b2c, 0xffff, 0x6b4d, 0x18a2, 0x1061, 0x10a2, 0x1081, 0x0860, 0xe73c, 0xffff, 0x5289, 0x1081,
    0x0881, 0x5289, 0x630c, 0x630c, 0x630b, 0x62eb, 0x62eb, 0x62ec, 0x5acb, 0x39c6, 0x1081, 0x1081, 0x41e7, 0x62eb, 0x62eb, 0x62eb, 0x62ec, 0x630c, 0x62eb, 0x62eb, 0x4a49, 0x1082, 0x1081, 0x18a2, 0x5aab, 0x5acb, 0x4a28, 0x1061, 0x1061, 0x1061, 0x4a08, 0x62eb, 0x6b2c, 0x5aca, 0x1081, 0x5aca, 0x5aeb, 0x5aeb, 0x630b, 0x5aeb, 0x5aeb, 0x62eb, 0x62eb, 0x41e7, 0x1081, 0x18c3, 0x5aca, 0x630b, 0x62eb, 0x62eb, 0x630b, 0x62eb, 0x630c, 0x62eb, 0x5a8a, 0x0820, 0x0840, 0x5aaa, 0x5aaa, 0x1061, 0x1081, 0x1081, 0x1061, 0x1061, 0x1041, 0x5aaa, 0x62eb, 0x18a2, 0x2944, 0x630b, 0x2944, 0x1881, 0x1061, 0x1081, 0x1081, 0x1041, 0x4a28, 0x630c, 0x20c2, 0x1081,
    0x1082, 0x0060, 0x0880, 0x0040, 0x0060, 0x0041, 0x0061, 0x0041, 0x0061, 0x0060, 0x0040, 0x0061, 0x0060, 0x0861, 0x0061, 0x0061, 0x0061, 0x0040, 0x0061, 0x0040, 0x0881, 0x0861, 0x0861, 0x0861, 0x0061, 0x0061, 0x0881, 0x0861, 0x0861, 0x0040, 0x0861, 0x0081, 0x0081, 0x0861, 0x0860, 0x0860, 0x0860, 0x0840, 0x0840, 0x0841, 0x0840, 0x0841, 0x0841, 0x0841, 0x0840, 0x0860, 0x0040, 0x0040, 0x0041, 0x0061, 0x0040, 0x0060, 0x0061, 0x0861, 0x0061, 0x0061, 0x0860, 0x0861, 0x0861, 0x0861, 0x0861, 0x0861, 0x0861, 0x0060, 0x0061, 0x0040, 0x0861, 0x0861, 0x0861, 0x0041, 0x0040, 0x0861, 0x0861, 0x0861, 0x0080, 0x0860, 0x0861, 0x0821, 0x0881, 0x1061,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xffff, 0xffff, 0xf800, 0xf800, 0xf800, 0xffff, 0xffff, 0xf800, 0xffff, 0xffff, 0xffff, 0xff9e, 0xffbf, 0xffff, 0xf800, 0xffdf, 0xffbe, 0xffff, 0xffdf, 0xffff, 0xf800, 0xf800, 0xf800, 0xf800, 0xffff, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xf800, 0xffff, 0xffff, 0xf800, 0xffff, 0xffff, 0xf800, 0xf800, 0xf800, 0xffff, 0xffff, 0xf800, 0xf800, 0xffff, 0xf800, 0xffff, 0xf800, 0xffff, 0xf800, 0xffff, 0xf800, 0xf800, 0xf800, 0xffdf, 0xffff, 0xffff, 0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xf800, 0xffff, 0xffff, 0xffff, 0xf73d, 0xffff, 0xf800, 0xf800, 0xf800, 0xffff, 0xffff, 0xf69b, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xffff, 0xf800, 0xf800, 0xf800, 0xf800, 0xffbe, 0xffff, 0xf800, 0xffff, 0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xf800, 0xffff, 0xf800, 0xffff, 0xf800, 0xffff, 0xf800, 0xf800, 0xf800, 0xffff, 0xffff, 0xf800, 0xf800, 0xffff, 0xf800, 0xf800, 0xf800, 0xffff, 0xf800, 0xf800, 0xf800, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xffff, 0xffff, 0xf800, 0xf800, 0xf800, 0xffff, 0xffff, 0xf800, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf800, 0xf800, 0xffff, 0xffff, 0xffff, 0xf800, 0xf800, 0xffff, 0xf800, 0xf800, 0xf800, 0xffff, 0xffff, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000
};

Image Title = Image(Title_Data);

/* ///////////////////////////////////////////////////////////////
  // Proc√©dures
  //////////////////////////////////////////////////////////////// */

const char TailleSprite = 8;

void Position_camera(uint8_t Xp, uint8_t  Yp) {

  // Calcul de la position de la zone √† afficher
  if (Xp >= 3) {
    Camera.X = Xp - 3;
  } else {
    Camera.X = 0;
  }

  if (Yp >= 3) {
    Camera.Y = Yp - 3;
  } else {
    Camera.Y = 0;
  }

  if (Xp > NB_COLONNES_NIVEAUX - 3) {
    Camera.X = NB_COLONNES_NIVEAUX - 5;
  }
  

  if (Yp > NB_LIGNES_NIVEAUX - 3) {
    Camera.Y = NB_LIGNES_NIVEAUX - 5;
  }
}

void DessineNiveau() {
  for (int ligne = 0 ; ligne < 7; ligne++) {
    for (int colonne = 0; colonne < 7; colonne++) {
      if ((Camera.Y + ligne) < NB_LIGNES_NIVEAUX) {
        if ((Camera.X + colonne) < NB_COLONNES_NIVEAUX) {
          DessineSprite(currentLevelData[(Camera.Y + ligne)*NB_COLONNES_NIVEAUX + Camera.X + colonne], colonne , ligne);
        }
      }    
    }
  }
}


void DessineSprite(char Type, char Xs, char Ys) {
  switch (Type) {
    case ' ' : // Sol vide
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Sol);
      break;
    case '#' : // Mur
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Mur);
      break;
    case '.' : // Zone d'arriv√©e des caisse
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Cible);
      break;
    case '$' : // Une caisse sur le sol
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Sol);
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Caisse);
      break;
    case '*' : // Une caisse sur une zone d'arriv√©e
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Cible);
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Caisse);
      break;
    case '@' : // Le personnage est sur un sol vide
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Sol);
      break;
    case '+' : // Le personnage est sur une zone cible pour les caises
      gb.display.drawImage(Xs * TailleSprite, Ys * TailleSprite, Cible);
      break;
  } // end Switch
}

void DessinePerso() {
  int Delta = Joueur.Anime / VITESSE_ANIME;
  int Delta2 = TailleSprite / 2;
  int Xp;
  int Yp;

  Xp = Joueur.X - Camera.X;
  Yp = Joueur.Y - Camera.Y;
  
  switch (Joueur.En_mouvement) {

    case STOP :
      switch (Joueur.Direction) {
        case BAS :
          gb.display.drawImage(Xp * TailleSprite, Yp * TailleSprite, Marche_bas1);
          break;
        case HAUT:
          gb.display.drawImage(Xp * TailleSprite, Yp * TailleSprite - Delta, Marche_haut1);
          break;
        case GAUCHE :
          gb.display.drawImage(Xp * TailleSprite - Delta, Yp* TailleSprite, Marche_gauche1);
          break;
        case DROITE :
          gb.display.drawImage(Xp * TailleSprite + Delta, Yp * TailleSprite, Marche_droite1);
          break;
      }
      break;

    case BAS :
      if (Joueur.Anime % TailleSprite >= Delta2) {
        gb.display.drawImage(Xp * TailleSprite, Yp * TailleSprite + Delta, Marche_bas2);
      } else {
        gb.display.drawImage(Xp * TailleSprite, Yp * TailleSprite + Delta, Marche_bas1);
      }
      if (Joueur.Pousse == 1) gb.display.drawImage(Xp * TailleSprite, (Yp+1) * TailleSprite + Delta, Caisse);
      break;

    case HAUT :
      if (Joueur.Anime % TailleSprite >= Delta2) {
        gb.display.drawImage(Xp * TailleSprite, Yp * TailleSprite - Delta, Marche_haut2);
      } else {
        gb.display.drawImage(Xp * TailleSprite, Yp * TailleSprite - Delta, Marche_haut1);
      }
      if (Joueur.Pousse == 1) gb.display.drawImage(3 * TailleSprite, (Yp -1) * TailleSprite - Delta, Caisse);
      break;

    case DROITE :
      if (Joueur.Anime % TailleSprite >= Delta2) {
        gb.display.drawImage(Xp * TailleSprite + Delta, Yp * TailleSprite, Marche_droite2);
      } else {
        gb.display.drawImage(Xp * TailleSprite + Delta, Yp * TailleSprite, Marche_droite1);
      }
      if (Joueur.Pousse == 1) gb.display.drawImage((Xp +1) * TailleSprite + Delta, Yp * TailleSprite, Caisse);
      break;
    case GAUCHE :
      if (Joueur.Anime % TailleSprite >= Delta2) {
        gb.display.drawImage(Xp * TailleSprite  - Delta, Yp * TailleSprite, Marche_gauche2);
      } else {
        gb.display.drawImage(Xp * TailleSprite - Delta, Yp * TailleSprite, Marche_gauche1);
      }
      if (Joueur.Pousse == 1) gb.display.drawImage((Xp -1) * TailleSprite - Delta, Yp * TailleSprite, Caisse);
      break;
  }
}
